# -*- coding: utf-8 -*-
"""face_based.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/SWhack-PhotoWithAI/PWA_APP/blob/AI_1/face_based.ipynb
"""

import torch
from torchvision import models
import torchvision.transforms as T
from PIL import Image




def main(image_list):
  #이미지 사이즈 및 임계값 설정

    THRESHOLD = 0.95

    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    
    if torch.cuda.is_available():
      print("GPU available")
    else:
      print("CPU")
      
    #  True
    #model불러오기
    model = models.detection.keypointrcnn_resnet50_fpn(pretrained=True).eval().to(device)

    #예시(여기가 카메라-> frame (이미지) 로드 해서 동작)
    # img = Image.open('./ho.jpg')

    _dict = {}

    for image in image_list:
      print('image : {}'.format(image))
      img = Image.open(image)

      #텐서로 변환
      trf = T.Compose([
          T.ToTensor()
      ])

      input_img = trf(img).to(device)
      out = model([input_img])[0]

      #사진의 최종 점수
      img_score = 0


      for score, keypoints_scores in zip(out['scores'], out['keypoints_scores']):
          score = score.detach().cpu().numpy()
          
          if score < THRESHOLD:
              continue
          
          keypoints_scores  = keypoints_scores.detach().cpu().numpy()
          #print(keypoints_scores)
          for i in range(len(keypoints_scores)):
            img_score += keypoints_scores[i]

      
      print("img_score : ",img_score)
      
      _dict[image.filename] = img_score
      
    return _dict

