# -*- coding: utf-8 -*-
"""face_based.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/SWhack-PhotoWithAI/PWA_APP/blob/AI_1/face_based.ipynb
"""

import torch
import torchvision
from torchvision import models
import torchvision.transforms as T

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches

import glob
import os

def get_image_list(image_dir):
    if image_dir is not None:
        print("Loading images from directory : ", image_dir)
        images = glob.glob(image_dir + '/*.png')
        images += glob.glob(image_dir + '/*.jpg')
        images += glob.glob(image_dir + '/*.jpeg')

    else:
        raise RuntimeError('Either -img_dir arguments must be passed as argument')

    return images

def main():
  #이미지 사이즈 및 임계값 설정

    THRESHOLD = 0.95

    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    
    if torch.cuda.is_available():
      print("GPU available")
    else:
      print("CPU")
      
    #  True
    #model불러오기
    model = models.detection.keypointrcnn_resnet50_fpn(pretrained=True).eval().to(device)

    #예시(여기가 카메라-> frame (이미지) 로드 해서 동작)
    # img = Image.open('./ho.jpg')
    imgDir_path = 'images/'
    _dict = {}

    for img_path in get_image_list(imgDir_path):
      print('img_path : {}'.format(img_path))
      img = Image.open(img_path)

      #텐서로 변환
      trf = T.Compose([
          T.ToTensor()
      ])

      input_img = trf(img).to(device)
      out = model([input_img])[0]

      #사진의 최종 점수
      img_score = 0


      for score, keypoints_scores in zip(out['scores'], out['keypoints_scores']):
          score = score.detach().cpu().numpy()
          
          if score < THRESHOLD:
              continue
          
          keypoints_scores  = keypoints_scores.detach().cpu().numpy()
          #print(keypoints_scores)
          for i in range(len(keypoints_scores)):
            img_score += keypoints_scores[i]

      print('removed image : {}'.format(img_path))
      os.remove(img_path)
      print("img_score : ",img_score)
      
      _dict[img_path] = img_score
      
    return _dict

